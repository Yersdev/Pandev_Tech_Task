package com.yers.pandev_tech_task.service;

import com.yers.pandev_tech_task.model.Category;
import com.yers.pandev_tech_task.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class ExcelService {
    private final CategoryRepository categoryRepository;
    private static final String DIRECTORY_PATH = "downloads/";
    private static final String FILE_PATH = DIRECTORY_PATH + "categories.xlsx";

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Excel –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
     */
    public File exportCategoriesToExcel() {
        List<Category> categories = categoryRepository.findAll();
        if (categories.isEmpty()) {
            return null;  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è
        }

        // üîπ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        File directory = new File(DIRECTORY_PATH);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏");

        int rowNum = 0;
        Row headerRow = sheet.createRow(rowNum++);
        headerRow.createCell(0).setCellValue("–ö–∞—Ç–µ–≥–æ—Ä–∏—è");
        headerRow.createCell(1).setCellValue("–†–æ–¥–∏—Ç–µ–ª—å");

        for (Category category : categories) {
            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(category.getName());
            row.createCell(1).setCellValue(category.getParent() != null ? category.getParent().getName() : "‚Äî");
        }

        File file = new File(FILE_PATH);
        try (FileOutputStream fileOut = new FileOutputStream(file)) {
            workbook.write(fileOut);
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }

        return file;
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Excel.
     */
    public String importCategoriesFromExcel(InputStream inputStream) {
        try (Workbook workbook = new XSSFWorkbook(inputStream)) {
            Sheet sheet = workbook.getSheetAt(0);
            Map<String, Category> categoryMap = new HashMap<>();

            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

                String categoryName = row.getCell(0).getStringCellValue().trim();
                String parentName = row.getCell(1).getStringCellValue().trim();

                Category parent = categoryRepository.findByName(parentName).orElse(null);
                if (parentName.equals("‚Äî")) {
                    parent = null;
                }

                if (!categoryRepository.existsByName(categoryName)) {
                    Category category = new Category();
                    category.setName(categoryName);
                    category.setParent(parent);
                    categoryRepository.save(category);
                }
            }
            return "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!";
        } catch (IOException e) {
            e.printStackTrace();
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞!";
        }
    }
}
