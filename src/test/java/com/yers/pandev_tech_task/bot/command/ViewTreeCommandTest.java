package com.yers.pandev_tech_task.bot.command;

import com.yers.pandev_tech_task.service.CategoryService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@DisplayName("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ViewTreeCommand")
class ViewTreeCommandTest {

    private ViewTreeCommand viewTreeCommand;
    private CategoryService categoryService;

    @BeforeEach
    void setUp() {
        categoryService = mock(CategoryService.class);
        viewTreeCommand = new ViewTreeCommand(categoryService);
    }

    @Test
    @DisplayName("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã /viewTree")
    void testSupports_ValidCommand() {
        assertTrue(viewTreeCommand.supports("/viewTree"));
    }

    @Test
    @DisplayName("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    void testSupports_InvalidCommand() {
        assertFalse(viewTreeCommand.supports("/help"));
        assertFalse(viewTreeCommand.supports("/download"));
        assertFalse(viewTreeCommand.supports("/upload"));
    }

    @Test
    @DisplayName("–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    void testProcess_ReturnsCategoryTree() {
        Long chatId = 123L;
        String expectedTree = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n - –§–∏–ª—å–º—ã\n - –ö–Ω–∏–≥–∏\n - –ú—É–∑—ã–∫–∞";

        when(categoryService.getCategoryTree()).thenReturn(expectedTree);

        String response = viewTreeCommand.process(chatId, "/viewTree");

        assertEquals(expectedTree, response);
        verify(categoryService, times(1)).getCategoryTree();
    }
}
